go mod help 查看帮助
go mod init<项目模块名称>初始化模块，会在项目根目录下生成 go.mod 文件。
go mod tidy 根据 go.mod 文件来处理依赖关系。
go mod vendor 将依赖包复制到项目下的 vendor 目录。建议一些使用了被墙包的话可以这么处理，方便用户快速使用命令 go build -mod=vendor 编译
go list -m all 显示依赖关系。go list -m -json all 显示详细依赖关系。
go mod download 下载依赖。参数是非必写的，path 是包的路径，version 是包的版本。
基本上用的时候就是，首先 go init 一下，然后编译的时候会把对应 git 上的包自己编译进去，编译之前可以 go tidy 处理一些依赖关系。如果网速慢也可以用 vendor 下载下来。

在此建议使用 go mod 的时候建议配置上 goproxy，毕竟国内被墙的厉害，就是环境变量加个 set GOPROXY=https://goproxy.io 就 ok。

1 新建一个名为 wserver 的项目文件夹（注意，该路径并不在GOPATH里）
2 进入 wserver 项目目录里，新建一个 go源码文件： main.go
package main

import (
	"fmt"
)

func main() {
    fmt.Println("This works")
}

3  打开终端执行命令：  go mod init wserver （go mod init 后面需要跟一个名字，我这里叫wserver）
看到提示 “go: creating new go.mod: module wserver”  说明 go mod 初始化成功了，会在当前目录下生成一个 go.mod 文件。

包含go.mod文件的目录也被称为模块根，也就是说，go.mod 文件的出现定义了它所在的目录为一个模块。
因为墙的关系 打开mod文件 然后在下面复制粘贴
replace (
golang.org/x/crypto => github.com/golang/crypto latest
golang.org/x/sys => github.com/golang/sys latest
)


执行上述命令之后，其实你已经可以开发编译运行此项目了，go run main.go 

如果安装新的第三方库 在这个目录下执行 go get -u ...

包路径中含有大写字母时导致go mod tidy，go mod download等命令无法使用。

解决方法: go.mod中添加replace

以"github.com/Unknwon/com"包为例:

    replace github.com/Unknwon/com => github.com/unknwon/com v0.0.0-20190804042917-757f69c95f3e


4 现在我们再建一个项目内的包 route ：里面新建h.go
package router
import (
	"fmt"
)

func A(){
	fmt.Println("ffff")
}

然后cd 。。 回到wserver文件夹里 main.go
import (
	"fmt"
	"wserver/router"
)

func main() {
	router.A()
    fmt.Println("This works")
}

再次执行go run main.go 
此时就可以得到导入的包中内容 
使用go mod ，利用Go 的 module 特性，你再也不需要关心GOPATH了（当然GOPATH变量还是要存在的，但只需要指定一个目录，而且以后就不用我们关心了）， 你可以任性的在你的硬盘任何位置新建一个Golang项目了。




添加新依赖包
方法一：
直接修改 go.mod 文件，然后执行 go mod download
方法二：
使用 go get packagename@v1.2.3，会自动更新 go.mod 文件的
方法三：
go run、go build 也会自动下载依赖

将依赖包下载到vendor目录
go mod vendor
注意： 这里只会下载对应版本的包文件，不会把所有版本下载。跟之前1.11使用方式一致。

亮点功能一：使用replace本地包替换
有时候国外软件可能被墙，这个功能就能派上用场了。
main.go

main.go

package main
import "my/example/pkg"
func main() {
    pkg.Hello()
}
go.mod

module my-mod

require my/example/pkg v0.0.0
replace my/example/pkg => ./pkg
注意点： 顶层依赖可替换但间接依赖不可替换

亮点功能二：语意化版本 semver—Semantic Versioning
semver是官方为了类库升级引入的新规范，即：
“If an old package and a new package have the same import path, the new package must be backwards compatible with the old package.” - go modules wiki "
如果旧软件包和新软件包具有相同的导入路径，则新软件包必须向后兼容旧软件包。"

main.go

package main
import (
    "fmt"
    v1 "github.com/e421083458/gomodtest_base"
    v2 "github.com/e421083458/gomodtest_base/v2"
)
func main(){
    v2.NewIntCollection("hello","sex")
    v1.NewIntCollection("hello")
    fmt.Println("hello");
}
go.mod

module new_module_test

require (
    github.com/e421083458/gomodtest_base v1.0.1
    github.com/e421083458/gomodtest_base/v2 v2.0.0
)
亮点功能三：依赖包冲突问题
情况1：直接 引用的包 和 间接引用的包是同一个包，但版本不同时？
依赖关系：
gomodtest_test|--> gomodtest_dep         |--> gomodtest_base@v1.0.0
              |--> gomodtest_base@v1.0.1    
go mod tidy 时，gomodtest_test会自动更新到与依赖包关联的第三方包相同版本号，并写入到go.mod，从而解决了版本冲突问题。

情况2: 间接引用的两个包是同一个包，但版本不同时？
比如以下场景：
gomodtest_test|--> gomodtest_dep  |--> gomodtest_base@v1.0.0
              |--> gomodtest_dep2 |--> gomodtest_base@v1.0.1
go mod tidy 时，默认使用第一个包引用版本号，gomodtest_base@v1.0.1，并写入到go.mod，这个时候就要注意两个版本是否功能完全兼容的问题了。

亮点功能四：自动查找包依赖
go mod 遵循了之前go get 自动下载依赖特性。所有的依赖包会自动全部下载。
未启用 go mod 功能的包会自动下载最高 tag 版本或最高 master commit版本
我之前也以为go mod只会自动查询使用了go mod的功能的包。

➜  new_module_test go mod download
go: finding github.com/e421083458/gomodtest_dep v0.0.0-20190501153957-6ff7f41fdb83
go: finding github.com/e421083458/gomodtest_base v1.0.1
go: finding github.com/e421083458/gomodtest_base/v2 v2.0.0
go: finding github.com/jianfengye/collection v0.0.0-20190426092112-28c4a03f0c86
go: finding github.com/pkg/errors v0.8.1
总结：
大部分场景下 go mod init 和 go mod tidy 两个命令就够用了

查看$GOPATH/pkg/mod里面的文件就知道了，mod做了一件类似maven的事把所有包都打上了版本号。
可以说这是 golang 迈向高大上语言的标志。
从此我们不再为多版本使用的困扰，也不再为IDE打开一个新项目后等待n分钟的生成缓存犯愁。推荐大家丢掉vendor使用统一管理。

semver 将版本信息绑定进包名对于习惯了传统包管理器方案的用户来说显得有些怪异，可能需要花上一些额外时间适应。

